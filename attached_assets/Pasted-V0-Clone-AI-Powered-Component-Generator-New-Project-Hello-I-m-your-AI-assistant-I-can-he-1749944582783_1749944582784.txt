V0 Clone
AI-Powered Component Generator


New Project
ðŸ‘‹ Hello! I'm your AI assistant. I can help you build beautiful React components with Tailwind CSS and TypeScript. What would you like to create today?

20:41:54

âœ¨ Try these suggestions:


Create a modern login form with animations

Form


Build a responsive pricing card component

Component


Design a dashboard with charts and stats

Layout


Create a blog post card with author info

Content

Describe the component you want to build...

Press Enter to send, Shift+Enter for new line

No Component Selected
Generate a component to see it here

Build Error
Failed to compile

Next.js (14.2.16) is outdated (learn more)
./lib/ai/gemini-service.ts
Error: 
  Ã— the name `GeminiService` is defined multiple times
     â•­â”€[/home/runner/workspace/lib/ai/gemini-service.ts:3:1]
   3 â”‚ 
   4 â”‚ import { GoogleGenerativeAI, GenerativeModel } from "@google/generative-ai"
   5 â”‚ 
   6 â”‚ class GeminiService {
     Â·       â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€
     Â·             â•°â”€â”€ previous definition of `GeminiService` here
   7 â”‚   private genAI: GoogleGenerativeAI | null = null
   8 â”‚   private model: GenerativeModel | null = null
   9 â”‚ 
  10 â”‚   constructor() {
  11 â”‚     if (typeof window !== "undefined") {
  12 â”‚       this.initialize()
  13 â”‚     }
  14 â”‚   }
  15 â”‚ 
  16 â”‚   private initialize() {
  17 â”‚     const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY
  18 â”‚     if (!apiKey) {
  19 â”‚       console.error("Gemini API key not found")
  20 â”‚       return
  21 â”‚     }
  22 â”‚ 
  23 â”‚     try {
  24 â”‚       this.genAI = new GoogleGenerativeAI(apiKey)
  25 â”‚       this.model = this.genAI.getGenerativeModel({ model: "gemini-pro" })
  26 â”‚     } catch (error) {
  27 â”‚       console.error("Failed to initialize Gemini:", error)
  28 â”‚     }
  29 â”‚   }
  30 â”‚ 
  31 â”‚   // GeraÃ§Ã£o de interfaces React/Next.js
  32 â”‚   async generateInterface(prompt: string): Promise<{
  33 â”‚     code: string
  34 â”‚     preview: string
  35 â”‚     explanation: string
  36 â”‚   }> {
  37 â”‚     if (!this.model) {
  38 â”‚       throw new Error("Gemini not initialized")
  39 â”‚     }
  40 â”‚ 
  41 â”‚     const enhancedPrompt = `
  42 â”‚ Gere uma interface React/Next.js moderna e responsiva baseada nesta descriÃ§Ã£o: "${prompt}"
  43 â”‚ 
  44 â”‚ Requisitos:
  45 â”‚ - Use Tailwind CSS para estilizaÃ§Ã£o
  46 â”‚ - Componentes funcionais com TypeScript
  47 â”‚ - Design moderno e minimalista inspirado no v0.dev
  48 â”‚ - CÃ³digo limpo e bem estruturado
  49 â”‚ - Componentes reutilizÃ¡veis
  50 â”‚ - Acessibilidade (ARIA labels)
  51 â”‚ - Responsividade (mobile-first)
  52 â”‚ 
  53 â”‚ Retorne no formato JSON:
  54 â”‚ {
  55 â”‚   "code": "cÃ³digo React/TypeScript completo",
  56 â”‚   "preview": "HTML preview da interface",
  57 â”‚   "explanation": "explicaÃ§Ã£o detalhada em portuguÃªs do que foi criado"
  58 â”‚ }
  59 â”‚ `
  60 â”‚ 
  61 â”‚     try {
  62 â”‚       const result = await this.model.generateContent(enhancedPrompt)
  63 â”‚       const response = await result.response
  64 â”‚       const text = response.text()
  65 â”‚       
  66 â”‚       // Parse da resposta JSON
  67 â”‚       const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/\{[\s\S]*\}/)
  68 â”‚       if (jsonMatch) {
  69 â”‚         return JSON.parse(jsonMatch[1] || jsonMatch[0])
  70 â”‚       }
  71 â”‚       
  72 â”‚       // Fallback se nÃ£o conseguir parsear JSON
  73 â”‚       return {
  74 â”‚         code: text,
  75 â”‚         preview: "<div>Preview nÃ£o disponÃ­vel</div>",
  76 â”‚         explanation: "Interface gerada com sucesso"
  77 â”‚       }
  78 â”‚     } catch (error) {
  79 â”‚       console.error("Erro ao gerar interface:", error)
  80 â”‚       throw error
  81 â”‚     }
  82 â”‚   }
  83 â”‚ 
  84 â”‚   // GeraÃ§Ã£o de componentes especÃ­ficos
  85 â”‚   async generateComponent(type: string, props: Record<string, any>): Promise<string> {
  86 â”‚     if (!this.model) {
  87 â”‚       throw new Error("Gemini not initialized")
  88 â”‚     }
  89 â”‚ 
  90 â”‚     const prompt = `
  91 â”‚ Gere um componente React ${type} com as seguintes propriedades: ${JSON.stringify(props)}
  92 â”‚ 
  93 â”‚ Requisitos:
  94 â”‚ - TypeScript
  95 â”‚ - Tailwind CSS
  96 â”‚ - AcessÃ­vel
  97 â”‚ - Responsivo
  98 â”‚ - Moderno
  99 â”‚ 
 100 â”‚ Retorne apenas o cÃ³digo do componente.
 101 â”‚ `
 102 â”‚ 
 103 â”‚     try {
 104 â”‚       const result = await this.model.generateContent(prompt)
 105 â”‚       const response = await result.response
 106 â”‚       return response.text()
 107 â”‚     } catch (error) {
 108 â”‚       console.error("Erro ao gerar componente:", error)
 109 â”‚       throw error
 110 â”‚     }
 111 â”‚   }
 112 â”‚ 
 113 â”‚   // ExplicaÃ§Ã£o de cÃ³digo
 114 â”‚   async explainCode(code: string): Promise<string> {
 115 â”‚     if (!this.model) {
 116 â”‚       throw new Error("Gemini not initialized")
 117 â”‚     }
 118 â”‚ 
 119 â”‚     const prompt = `
 120 â”‚ Explique este cÃ³digo em portuguÃªs brasileiro de forma didÃ¡tica e detalhada:
 121 â”‚ 
 122 â”‚ \`\`\`
 123 â”‚ ${code}
 124 â”‚ \`\`\`
 125 â”‚ 
 126 â”‚ Inclua:
 127 â”‚ - O que o cÃ³digo faz
 128 â”‚ - Como funciona cada parte
 129 â”‚ - Conceitos utilizados
 130 â”‚ - Melhores prÃ¡ticas aplicadas
 131 â”‚ `
 132 â”‚ 
 133 â”‚     try {
 134 â”‚       const result = await this.model.generateContent(prompt)
 135 â”‚       const response = await result.response
 136 â”‚       return response.text()
 137 â”‚     } catch (error) {
 138 â”‚       console.error("Erro ao explicar cÃ³digo:", error)
 139 â”‚       throw error
 140 â”‚     }
 141 â”‚   }
 142 â”‚ 
 143 â”‚   // Debug inteligente
 144 â”‚   async debugCode(code: string, error: string): Promise<{
 145 â”‚     solution: string
 146 â”‚     explanation: string
 147 â”‚     fixedCode: string
 148 â”‚   }> {
 149 â”‚     if (!this.model) {
 150 â”‚       throw new Error("Gemini not initialized")
 151 â”‚     }
 152 â”‚ 
 153 â”‚     const prompt = `
 154 â”‚ Analise este cÃ³digo com erro e forneÃ§a uma soluÃ§Ã£o:
 155 â”‚ 
 156 â”‚ CÃ³digo:
 157 â”‚ \`\`\`
 158 â”‚ ${code}
 159 â”‚ \`\`\`
 160 â”‚ 
 161 â”‚ Erro:
 162 â”‚ ${error}
 163 â”‚ 
 164 â”‚ Retorne no formato JSON:
 165 â”‚ {
 166 â”‚   "solution": "soluÃ§Ã£o em portuguÃªs",
 167 â”‚   "explanation": "explicaÃ§Ã£o detalhada do problema e como corrigir",
 168 â”‚   "fixedCode": "cÃ³digo corrigido"
 169 â”‚ }
 170 â”‚ `
 171 â”‚ 
 172 â”‚     try {
 173 â”‚       const result = await this.model.generateContent(prompt)
 174 â”‚       const response = await result.response
 175 â”‚       const text = response.text()
 176 â”‚       
 177 â”‚       const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/\{[\s\S]*\}/)
 178 â”‚       if (jsonMatch) {
 179 â”‚         return JSON.parse(jsonMatch[1] || jsonMatch[0])
 180 â”‚       }
 181 â”‚       
 182 â”‚       return {
 183 â”‚         solution: "SoluÃ§Ã£o nÃ£o encontrada automaticamente",
 184 â”‚         explanation: text,
 185 â”‚         fixedCode: code
 186 â”‚       }
 187 â”‚     } catch (error) {
 188 â”‚       console.error("Erro ao debugar cÃ³digo:", error)
 189 â”‚       throw error
 190 â”‚     }
 191 â”‚   }
 192 â”‚ 
 193 â”‚   // RefatoraÃ§Ã£o automÃ¡tica
 194 â”‚   async refactorCode(code: string, goal: string = "otimizaÃ§Ã£o"): Promise<{
 195 â”‚     refactoredCode: string
 196 â”‚     improvements: string[]
 197 â”‚     explanation: string
 198 â”‚   }> {
 199 â”‚     if (!this.model) {
 200 â”‚       throw new Error("Gemini not initialized")
 201 â”‚     }
 202 â”‚ 
 203 â”‚     const prompt = `
 204 â”‚ Refatore este cÃ³digo para ${goal}:
 205 â”‚ 
 206 â”‚ \`\`\`
 207 â”‚ ${code}
 208 â”‚ \`\`\`
 209 â”‚ 
 210 â”‚ Foque em:
 211 â”‚ - Performance
 212 â”‚ - Legibilidade
 213 â”‚ - Manutenibilidade
 214 â”‚ - Acessibilidade
 215 â”‚ - Boas prÃ¡ticas
 216 â”‚ 
 217 â”‚ Retorne no formato JSON:
 218 â”‚ {
 219 â”‚   "refactoredCode": "cÃ³digo refatorado",
 220 â”‚   "improvements": ["lista de melhorias aplicadas"],
 221 â”‚   "explanation": "explicaÃ§Ã£o das mudanÃ§as em portuguÃªs"
 222 â”‚ }
 223 â”‚ `
 224 â”‚ 
 225 â”‚     try {
 226 â”‚       const result = await this.model.generateContent(prompt)
 227 â”‚       const response = await result.response
 228 â”‚       const text = response.text()
 229 â”‚       
 230 â”‚       const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/\{[\s\S]*\}/)
 231 â”‚       if (jsonMatch) {
 232 â”‚         return JSON.parse(jsonMatch[1] || jsonMatch[0])
 233 â”‚       }
 234 â”‚       
 235 â”‚       return {
 236 â”‚         refactoredCode: code,
 237 â”‚         improvements: [],
 238 â”‚         explanation: text
 239 â”‚       }
 240 â”‚     } catch (error) {
 241 â”‚       console.error("Erro ao refatorar cÃ³digo:", error)
 242 â”‚       throw error
 243 â”‚     }
 244 â”‚   }
 245 â”‚ 
 246 â”‚   // TraduÃ§Ã£o de cÃ³digo entre linguagens
 247 â”‚   async translateCode(code: string, fromLang: string, toLang: string): Promise<{
 248 â”‚     translatedCode: string
 249 â”‚     explanation: string
 250 â”‚     differences: string[]
 251 â”‚   }> {
 252 â”‚     if (!this.model) {
 253 â”‚       throw new Error("Gemini not initialized")
 254 â”‚     }
 255 â”‚ 
 256 â”‚     const prompt = `
 257 â”‚ Traduza este cÃ³digo de ${fromLang} para ${toLang}:
 258 â”‚ 
 259 â”‚ \`\`\`${fromLang}
 260 â”‚ ${code}
 261 â”‚ \`\`\`
 262 â”‚ 
 263 â”‚ Retorne no formato JSON:
 264 â”‚ {
 265 â”‚   "translatedCode": "cÃ³digo traduzido para ${toLang}",
 266 â”‚   "explanation": "explicaÃ§Ã£o da traduÃ§Ã£o em portuguÃªs",
 267 â”‚   "differences": ["principais diferenÃ§as entre as linguagens"]
 268 â”‚ }
 269 â”‚ `
 270 â”‚ 
 271 â”‚     try {
 272 â”‚       const result = await this.model.generateContent(prompt)
 273 â”‚       const response = await result.response
 274 â”‚       const text = response.text()
 275 â”‚       
 276 â”‚       const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/\{[\s\S]*\}/)
 277 â”‚       if (jsonMatch) {
 278 â”‚         return JSON.parse(jsonMatch[1] || jsonMatch[0])
 279 â”‚       }
 280 â”‚       
 281 â”‚       return {
 282 â”‚         translatedCode: code,
 283 â”‚         explanation: text,
 284 â”‚         differences: []
 285 â”‚       }
 286 â”‚     } catch (error) {
 287 â”‚       console.error("Erro ao traduzir cÃ³digo:", error)
 288 â”‚       throw error
 289 â”‚     }
 290 â”‚   }
 291 â”‚ 
 292 â”‚   // GeraÃ§Ã£o de cÃ³digo quÃ¢ntico
 293 â”‚   async generateQuantumCode(algorithm: string): Promise<{
 294 â”‚     code: string
 295 â”‚     explanation: string
 296 â”‚     circuit: string
 297 â”‚   }> {
 298 â”‚     if (!this.model) {
 299 â”‚       throw new Error("Gemini not initialized")
 300 â”‚     }
 301 â”‚ 
 302 â”‚     const prompt = `
 303 â”‚ Gere cÃ³digo de computaÃ§Ã£o quÃ¢ntica para o algoritmo: ${algorithm}
 304 â”‚ 
 305 â”‚ Use Qiskit (Python) e inclua:
 306 â”‚ - CÃ³digo completo e funcional
 307 â”‚ - ComentÃ¡rios em portuguÃªs
 308 â”‚ - ExplicaÃ§Ã£o do algoritmo
 309 â”‚ - RepresentaÃ§Ã£o do circuito
 310 â”‚ 
 311 â”‚ Retorne no formato JSON:
 312 â”‚ {
 313 â”‚   "code": "cÃ³digo Python com Qiskit",
 314 â”‚   "explanation": "explicaÃ§Ã£o detalhada em portuguÃªs",
 315 â”‚   "circuit": "representaÃ§Ã£o textual do circuito"
 316 â”‚ }
 317 â”‚ `
 318 â”‚ 
 319 â”‚     try {
 320 â”‚       const result = await this.model.generateContent(prompt)
 321 â”‚       const response = await result.response
 322 â”‚       const text = response.text()
 323 â”‚       
 324 â”‚       const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/\{[\s\S]*\}/)
 325 â”‚       if (jsonMatch) {
 326 â”‚         return JSON.parse(jsonMatch[1] || jsonMatch[0])
 327 â”‚       }
 328 â”‚       
 329 â”‚       return {
 330 â”‚         code: text,
 331 â”‚         explanation: "CÃ³digo quÃ¢ntico gerado",
 332 â”‚         circuit: "Circuito nÃ£o disponÃ­vel"
 333 â”‚       }
 334 â”‚     } catch (error) {
 335 â”‚       console.error("Erro ao gerar cÃ³digo quÃ¢ntico:", error)
 336 â”‚       throw error
 337 â”‚     }
 338 â”‚   }
 339 â”‚ 
 340 â”‚   // SugestÃµes de arquitetura
 341 â”‚   async suggestArchitecture(projectDescription: string): Promise<{
 342 â”‚     architecture: string
 343 â”‚     components: string[]
 344 â”‚     explanation: string
 345 â”‚     diagram: string
 346 â”‚   }> {
 347 â”‚     if (!this.model) {
 348 â”‚       throw new Error("Gemini not initialized")
 349 â”‚     }
 350 â”‚ 
 351 â”‚     const prompt = `
 352 â”‚ Sugira uma arquitetura de software para: ${projectDescription}
 353 â”‚ 
 354 â”‚ Inclua:
 355 â”‚ - PadrÃµes de arquitetura recomendados
 356 â”‚ - Componentes principais
 357 â”‚ - Fluxo de dados
 358 â”‚ - Tecnologias recomendadas
 359 â”‚ - Diagrama textual
 360 â”‚ 
 361 â”‚ Retorne no formato JSON:
 362 â”‚ {
 363 â”‚   "architecture": "tipo de arquitetura recomendada",
 364 â”‚   "components": ["lista de componentes"],
 365 â”‚   "explanation": "explicaÃ§Ã£o detalhada em portuguÃªs",
 366 â”‚   "diagram": "diagrama textual da arquitetura"
 367 â”‚ }
 368 â”‚ `
 369 â”‚ 
 370 â”‚     try {
 371 â”‚       const result = await this.model.generateContent(prompt)
 372 â”‚       const response = await result.response
 373 â”‚       const text = response.text()
 374 â”‚       
 375 â”‚       const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/\{[\s\S]*\}/)
 376 â”‚       if (jsonMatch) {
 377 â”‚         return JSON.parse(jsonMatch[1] || jsonMatch[0])
 378 â”‚       }
 379 â”‚       
 380 â”‚       return {
 381 â”‚         architecture: "Arquitetura modular",
 382 â”‚         components: [],
 383 â”‚         explanation: text,
 384 â”‚         diagram: "Diagrama nÃ£o disponÃ­vel"
 385 â”‚       }
 386 â”‚     } catch (error) {
 387 â”‚       console.error("Erro ao sugerir arquitetura:", error)
 388 â”‚       throw error
 389 â”‚     }
 390 â”‚   }
 391 â”‚ 
 392 â”‚   // Chat colaborativo
 393 â”‚   async processMessage(message: string, context: string = ""): Promise<string> {
 394 â”‚     if (!this.model) {
 395 â”‚       throw new Error("Gemini not initialized")
 396 â”‚     }
 397 â”‚ 
 398 â”‚     const prompt = `
 399 â”‚ ${context ? `Contexto: ${context}\n` : ""}
 400 â”‚ UsuÃ¡rio: ${message}
 401 â”‚ 
 402 â”‚ Responda de forma Ãºtil e amigÃ¡vel em portuguÃªs brasileiro. Se for uma pergunta tÃ©cnica, forneÃ§a exemplos de cÃ³digo quando apropriado.
 403 â”‚ `
 404 â”‚ 
 405 â”‚     try {
 406 â”‚       const result = await this.model.generateContent(prompt)
 407 â”‚       const response = await result.response
 408 â”‚       return response.text()
 409 â”‚     } catch (error) {
 410 â”‚       console.error("Erro ao processar mensagem:", error)
 411 â”‚       throw error
 412 â”‚     }
 413 â”‚   }
 414 â”‚ }
 415 â”‚ 
 416 â”‚ export const geminiService = new GeminiService()
 417 â”‚ export default geminiService
 418 â”‚ import { GoogleGenerativeAI } from "@google/generative-ai";
 419 â”‚ 
 420 â”‚ const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
 421 â”‚ 
 422 â”‚ if (!API_KEY) {
 423 â”‚   console.warn("Gemini API key not found. Please set NEXT_PUBLIC_GEMINI_API_KEY in your environment variables.");
 424 â”‚ }
 425 â”‚ 
 426 â”‚ const genAI = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;
 427 â”‚ 
 428 â”‚ class GeminiService {
     Â·       â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€
     Â·             â•°â”€â”€ `GeminiService` redefined here
 429 â”‚   private model: any;
 430 â”‚ 
 431 â”‚   constructor() {
     â•°â”€â”€â”€â”€

  Ã— the name `geminiService` is defined multiple times
     â•­â”€[/home/runner/workspace/lib/ai/gemini-service.ts:413:1]
 413 â”‚   }
 414 â”‚ }
 415 â”‚ 
 416 â”‚ export const geminiService = new GeminiService()
     Â·              â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€
     Â·                    â•°â”€â”€ previous definition of `geminiService` here
 417 â”‚ export default geminiService
 418 â”‚ import { GoogleGenerativeAI } from "@google/generative-ai";
 419 â”‚ 
 420 â”‚ const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
 421 â”‚ 
 422 â”‚ if (!API_KEY) {
 423 â”‚   console.warn("Gemini API key not found. Please set NEXT_PUBLIC_GEMINI_API_KEY in your environment variables.");
 424 â”‚ }
 425 â”‚ 
 426 â”‚ const genAI = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;
 427 â”‚ 
 428 â”‚ class GeminiService {
 429 â”‚   private model: any;
 430 â”‚ 
 431 â”‚   constructor() {
 432 â”‚     if (genAI) {
 433 â”‚       this.model = genAI.getGenerativeModel({ model: "gemini-pro" });
 434 â”‚     }
 435 â”‚   }
 436 â”‚ 
 437 â”‚   async generateResponse(prompt: string): Promise<string> {
 438 â”‚     if (!this.model) {
 439 â”‚       throw new Error("Gemini AI is not configured. Please check your API key.");
 440 â”‚     }
 441 â”‚ 
 442 â”‚     try {
 443 â”‚       const result = await this.model.generateContent(prompt);
 444 â”‚       const response = await result.response;
 445 â”‚       return response.text();
 446 â”‚     } catch (error) {
 447 â”‚       console.error("Error generating response from Gemini:", error);
 448 â”‚       throw new Error("Failed to generate response from Gemini AI");
 449 â”‚     }
 450 â”‚   }
 451 â”‚ 
 452 â”‚   async generateCode(description: string, framework: string = "react"): Promise<string> {
 453 â”‚     const prompt = `Create a ${framework} component based on this description: ${description}. 
 454 â”‚     Please provide only the component code with modern styling using Tailwind CSS. 
 455 â”‚     Make it responsive and accessible. Include proper TypeScript types if applicable.
 456 â”‚     
 457 â”‚     Description: ${description}`;
 458 â”‚ 
 459 â”‚     return this.generateResponse(prompt);
 460 â”‚   }
 461 â”‚ 
 462 â”‚   async improveCode(code: string, instructions: string): Promise<string> {
 463 â”‚     const prompt = `Improve this code based on the following instructions: ${instructions}
 464 â”‚     
 465 â”‚     Current code:
 466 â”‚     ${code}
 467 â”‚     
 468 â”‚     Please provide the improved version with explanations for the changes made.`;
 469 â”‚ 
 470 â”‚     return this.generateResponse(prompt);
 471 â”‚   }
 472 â”‚ 
 473 â”‚   async explainCode(code: string): Promise<string> {
 474 â”‚     const prompt = `Explain this code in detail, including:
 475 â”‚     - What it does
 476 â”‚     - How it works
 477 â”‚     - Key features and patterns used
 478 â”‚     - Potential improvements
 479 â”‚     
 480 â”‚     Code:
 481 â”‚     ${code}`;
 482 â”‚ 
 483 â”‚     return this.generateResponse(prompt);
 484 â”‚   }
 485 â”‚ }
 486 â”‚ 
 487 â”‚ const geminiService = new GeminiService();
     Â·       â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€
     Â·             â•°â”€â”€ `geminiService` redefined here
 488 â”‚ export default geminiService;
     â•°â”€â”€â”€â”€

  Ã— the name `default` is exported multiple times
     â•­â”€[/home/runner/workspace/lib/ai/gemini-service.ts:414:1]
 414 â”‚ }
 415 â”‚ 
 416 â”‚ export const geminiService = new GeminiService()
 417 â”‚ export default geminiService
     Â· â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
     Â·               â•°â”€â”€ previous exported here
 418 â”‚ import { GoogleGenerativeAI } from "@google/generative-ai";
 419 â”‚ 
 420 â”‚ const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
 421 â”‚ 
 422 â”‚ if (!API_KEY) {
 423 â”‚   console.warn("Gemini API key not found. Please set NEXT_PUBLIC_GEMINI_API_KEY in your environment variables.");
 424 â”‚ }
 425 â”‚ 
 426 â”‚ const genAI = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;
 427 â”‚ 
 428 â”‚ class GeminiService {
 429 â”‚   private model: any;
 430 â”‚ 
 431 â”‚   constructor() {
 432 â”‚     if (genAI) {
 433 â”‚       this.model = genAI.getGenerativeModel({ model: "gemini-pro" });
 434 â”‚     }
 435 â”‚   }
 436 â”‚ 
 437 â”‚   async generateResponse(prompt: string): Promise<string> {
 438 â”‚     if (!this.model) {
 439 â”‚       throw new Error("Gemini AI is not configured. Please check your API key.");
 440 â”‚     }
 441 â”‚ 
 442 â”‚     try {
 443 â”‚       const result = await this.model.generateContent(prompt);
 444 â”‚       const response = await result.response;
 445 â”‚       return response.text();
 446 â”‚     } catch (error) {
 447 â”‚       console.error("Error generating response from Gemini:", error);
 448 â”‚       throw new Error("Failed to generate response from Gemini AI");
 449 â”‚     }
 450 â”‚   }
 451 â”‚ 
 452 â”‚   async generateCode(description: string, framework: string = "react"): Promise<string> {
 453 â”‚     const prompt = `Create a ${framework} component based on this description: ${description}. 
 454 â”‚     Please provide only the component code with modern styling using Tailwind CSS. 
 455 â”‚     Make it responsive and accessible. Include proper TypeScript types if applicable.
 456 â”‚     
 457 â”‚     Description: ${description}`;
 458 â”‚ 
 459 â”‚     return this.generateResponse(prompt);
 460 â”‚   }
 461 â”‚ 
 462 â”‚   async improveCode(code: string, instructions: string): Promise<string> {
 463 â”‚     const prompt = `Improve this code based on the following instructions: ${instructions}
 464 â”‚     
 465 â”‚     Current code:
 466 â”‚     ${code}
 467 â”‚     
 468 â”‚     Please provide the improved version with explanations for the changes made.`;
 469 â”‚ 
 470 â”‚     return this.generateResponse(prompt);
 471 â”‚   }
 472 â”‚ 
 473 â”‚   async explainCode(code: string): Promise<string> {
 474 â”‚     const prompt = `Explain this code in detail, including:
 475 â”‚     - What it does
 476 â”‚     - How it works
 477 â”‚     - Key features and patterns used
 478 â”‚     - Potential improvements
 479 â”‚     
 480 â”‚     Code:
 481 â”‚     ${code}`;
 482 â”‚ 
 483 â”‚     return this.generateResponse(prompt);
 484 â”‚   }
 485 â”‚ }
 486 â”‚ 
 487 â”‚ const geminiService = new GeminiService();
 488 â”‚ export default geminiService;
     Â· â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
     Â·               â•°â”€â”€ exported more than once
     â•°â”€â”€â”€â”€

Error: 
  â˜ž Exported identifiers must be unique

Import trace for requested module:
./lib/ai/gemini-service.ts
./components/v0-clone/v0-interface.tsx
This error occurred during the build process and can only be dismissed by fixing the error.