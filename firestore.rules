rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Regras para usuários
    match /users/{userId} {
      // Usuários podem ler e escrever seus próprios dados
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Admins podem ler todos os usuários
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Admins podem atualizar roles de outros usuários
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'updatedAt']);
    }

    // Regras para projetos
    match /projects/{projectId} {
      // Usuários podem ler e escrever seus próprios projetos
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;

      // Permitir criação de novos projetos
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // Admins podem ler todos os projetos
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regras para arquivos de projeto
    match /projects/{projectId}/files/{fileId} {
      // Usuários podem ler e escrever arquivos de seus próprios projetos
      allow read, write: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.userId;
    }

    // Regras para sessões/tokens (se necessário)
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Regras para logs de atividade
    match /activityLogs/{logId} {
      // Usuários podem ler seus próprios logs
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;

      // Sistema pode criar logs
      allow create: if request.auth != null;

      // Admins podem ler todos os logs
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regras para configurações do sistema
    match /systemConfig/{configId} {
      // Apenas admins podem ler e escrever configurações do sistema
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regras para compartilhamento de projetos
    match /sharedProjects/{shareId} {
      // Usuário que criou o compartilhamento pode gerenciar
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Usuários com acesso podem ler
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.sharedWith;
    }

    // Negar acesso a tudo o mais
    match /{document=**} {
      allow read, write: if false;
    }
  }
}