rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Função para verificar se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Função para verificar se o usuário é admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Função para verificar se é o próprio usuário
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Regras para coleção de usuários
    match /users/{userId} {
      // Permitir leitura se for o próprio usuário ou admin
      allow read: if isOwner(userId) || isAdmin();

      // Permitir criação apenas durante signup ou por admin
      allow create: if isOwner(userId) || isAdmin();

      // Permitir atualização se for o próprio usuário ou admin
      allow update: if isOwner(userId) || isAdmin();

      // Apenas admin pode deletar usuários
      allow delete: if isAdmin();
    }

    // Regras para projetos
    match /projects/{projectId} {
      // Permitir leitura se for público, próprio usuário, colaborador ou admin
      allow read: if resource.data.isPublic == true || 
                     isOwner(resource.data.ownerId) || 
                     request.auth.uid in resource.data.collaborators ||
                     isAdmin();

      // Permitir criação se estiver autenticado
      allow create: if isAuthenticated();

      // Permitir atualização se for o dono, colaborador ou admin
      allow update: if isOwner(resource.data.ownerId) || 
                       request.auth.uid in resource.data.collaborators ||
                       isAdmin();

      // Permitir exclusão se for o dono ou admin
      allow delete: if isOwner(resource.data.ownerId) || isAdmin();
    }

    // Regras para arquivos de projeto
    match /projects/{projectId}/files/{fileId} {
      // Herdar permissões do projeto pai
      allow read, write: if isAuthenticated() && (
        get(/databases/$(database)/documents/projects/$(projectId)).data.isPublic == true ||
        isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId) ||
        request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.collaborators ||
        isAdmin()
      );
    }

    // Regras para outras coleções (admin apenas)
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}